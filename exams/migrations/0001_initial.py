# Generated by Django 5.2.6 on 2025-09-09 04:26

import django.core.validators
import django.db.models.constraints
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('learning', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('text', models.TextField()),
                ('explanation', models.TextField(blank=True)),
                ('question_type', models.CharField(choices=[('single', 'Single choice'), ('multi', 'Multi choice'), ('bool', 'True/False'), ('text', 'Short text'), ('number', 'Number')], default='single', max_length=12)),
                ('time_limit_seconds', models.PositiveIntegerField(default=120, validators=[django.core.validators.MinValueValidator(10), django.core.validators.MaxValueValidator(3600)])),
                ('subspecialty', models.CharField(blank=True, max_length=128)),
                ('difficulty', models.CharField(choices=[('easy', 'Easy'), ('medium', 'Medium'), ('hard', 'Hard')], default='medium', max_length=16)),
                ('region_hint', models.CharField(blank=True, choices=[('NORTH', 'North'), ('SOUTH', 'South'), ('EAST', 'East'), ('WEST', 'West'), ('CENTRAL', 'Central')], max_length=16)),
                ('marks', models.DecimalField(decimal_places=2, default=1, max_digits=6)),
                ('negative_marks', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('is_active', models.BooleanField(default=True)),
                ('tags', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'indexes': [models.Index(fields=['subspecialty'], name='exams_quest_subspec_50666a_idx'), models.Index(fields=['difficulty'], name='exams_quest_difficu_7bcf5f_idx'), models.Index(fields=['is_active'], name='exams_quest_is_acti_d7f9ad_idx')],
            },
        ),
        migrations.CreateModel(
            name='QuestionOption',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('text', models.TextField()),
                ('is_correct', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='exams.question')),
            ],
            options={
                'ordering': ('question', 'order', 'created_at'),
            },
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('slug', models.SlugField(max_length=220, unique=True)),
                ('description', models.TextField(blank=True)),
                ('subspecialty', models.CharField(blank=True, max_length=128)),
                ('easy_count', models.PositiveIntegerField(default=0)),
                ('medium_count', models.PositiveIntegerField(default=0)),
                ('hard_count', models.PositiveIntegerField(default=0)),
                ('start_at', models.DateTimeField()),
                ('end_at', models.DateTimeField()),
                ('duration_seconds', models.PositiveIntegerField(default=1800, validators=[django.core.validators.MinValueValidator(60), django.core.validators.MaxValueValidator(14400)])),
                ('pass_threshold_percent', models.PositiveIntegerField(default=90, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('max_attempts_per_user', models.PositiveIntegerField(default=1)),
                ('question_count', models.PositiveIntegerField(default=25, validators=[django.core.validators.MinValueValidator(1)])),
                ('shuffle_questions', models.BooleanField(default=True)),
                ('shuffle_options', models.BooleanField(default=True)),
                ('require_fullscreen', models.BooleanField(default=True)),
                ('lock_on_tab_switch', models.BooleanField(default=True)),
                ('results_visible_after_close', models.BooleanField(default=False)),
                ('results_published_at', models.DateTimeField(blank=True, null=True)),
                ('prerequisite_tutorial', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='quizzes_requiring', to='learning.tutorial')),
            ],
            options={
                'ordering': ('-start_at', 'slug'),
            },
        ),
        migrations.CreateModel(
            name='AccessToken',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('token', models.CharField(max_length=64, unique=True)),
                ('expires_at', models.DateTimeField()),
                ('used_at', models.DateTimeField(blank=True, null=True)),
                ('used_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_tokens', to=settings.AUTH_USER_MODEL)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_tokens', to='exams.quiz')),
            ],
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('started', 'Started'), ('submitted', 'Submitted'), ('disqualified', 'Disqualified'), ('expired', 'Expired')], default='started', max_length=16)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('device_fingerprint', models.CharField(blank=True, max_length=256)),
                ('start_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True)),
                ('total_marks', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('obtained_marks', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('percent', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('is_passed', models.BooleanField(default=False)),
                ('time_taken_seconds', models.PositiveIntegerField(default=0)),
                ('disqualified_reason', models.TextField(blank=True)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='exams.quiz')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quiz_attempts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ParticipationCertificate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('serial_number', models.CharField(max_length=32, unique=True)),
                ('file', models.FileField(upload_to='certificates/')),
                ('issued_at', models.DateTimeField(auto_now_add=True)),
                ('attempt', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='certificate', to='exams.quizattempt')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AntiCheatEventLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(choices=[('tab_switch', 'Tab/Window switch'), ('fullscreen_exit', 'Fullscreen exit'), ('devtools', 'DevTools opened'), ('copy', 'Copy'), ('paste', 'Paste'), ('multi_window', 'Multiple windows'), ('id_mismatch', 'Identity mismatch'), ('MULTI_PERSON', 'MULTI PERSON Detected'), ('other', 'Other')], max_length=32)),
                ('details', models.JSONField(blank=True, default=dict)),
                ('occurred_at', models.DateTimeField(auto_now_add=True)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='anticheat_events', to='exams.quizattempt')),
            ],
        ),
        migrations.CreateModel(
            name='QuizStage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=1)),
                ('duration_seconds', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(14400)])),
                ('question_count', models.PositiveIntegerField(blank=True, null=True)),
                ('shuffle_questions', models.BooleanField(blank=True, null=True)),
                ('shuffle_options', models.BooleanField(blank=True, null=True)),
                ('is_current', models.BooleanField(default=False)),
                ('requires_admission', models.BooleanField(default=False)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stages', to='exams.quiz')),
            ],
            options={
                'ordering': ('quiz', 'order', 'created_at'),
            },
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('zone', models.CharField(choices=[('NORTH', 'North'), ('SOUTH', 'South'), ('EAST', 'East'), ('WEST', 'West'), ('CENTRAL', 'Central')], max_length=16)),
                ('subspecialty', models.CharField(blank=True, max_length=128)),
                ('percent', models.DecimalField(decimal_places=2, max_digits=5)),
                ('obtained_marks', models.DecimalField(decimal_places=2, max_digits=10)),
                ('total_marks', models.DecimalField(decimal_places=2, max_digits=10)),
                ('time_taken_seconds', models.PositiveIntegerField()),
                ('rank', models.PositiveIntegerField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_rows', to=settings.AUTH_USER_MODEL)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard', to='exams.quiz')),
                ('quiz_stage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard', to='exams.quizstage')),
            ],
        ),
        migrations.CreateModel(
            name='QuizStageAttempt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('submitted_at', models.DateTimeField(blank=True, null=True)),
                ('time_taken_seconds', models.PositiveIntegerField(default=0)),
                ('total_marks', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('obtained_marks', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('percent', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stage_attempts', to='exams.quizattempt')),
                ('stage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempts', to='exams.quizstage')),
            ],
            options={
                'ordering': ('attempt', 'stage__order', 'created_at'),
            },
        ),
        migrations.CreateModel(
            name='QuestionExposureLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('event', models.CharField(default='shown', max_length=24)),
                ('occurred_at', models.DateTimeField(auto_now_add=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exposure_logs', to='exams.question')),
                ('stage_attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exposure_logs', to='exams.quizstageattempt')),
            ],
        ),
        migrations.CreateModel(
            name='AttemptAnswer',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('answer_text', models.TextField(blank=True)),
                ('answer_number', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('answer_bool', models.BooleanField(blank=True, null=True)),
                ('is_correct', models.BooleanField(default=False)),
                ('awarded_marks', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('order', models.PositiveIntegerField(default=0)),
                ('time_spent_seconds', models.PositiveIntegerField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='exams.question')),
                ('selected_option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='selected_in', to='exams.questionoption')),
                ('stage_attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='exams.quizstageattempt')),
            ],
        ),
        migrations.CreateModel(
            name='StageAdmission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rule_code', models.CharField(blank=True, max_length=32)),
                ('meta', models.JSONField(blank=True, default=dict)),
                ('admitted_at', models.DateTimeField(auto_now_add=True)),
                ('granted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='granted_stage_admissions', to=settings.AUTH_USER_MODEL)),
                ('stage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admissions', to='exams.quizstage')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stage_admissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('-admitted_at', 'stage_id', 'user_id'),
            },
        ),
        migrations.CreateModel(
            name='StageAttemptItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.PositiveIntegerField(default=1)),
                ('marks', models.DecimalField(decimal_places=2, default=1, max_digits=6)),
                ('negative_marks', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('time_limit_seconds', models.PositiveIntegerField(default=120)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stage_attempt_items', to='exams.question')),
                ('stage_attempt', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='exams.quizstageattempt')),
            ],
            options={
                'ordering': ('stage_attempt', 'order', 'id'),
            },
        ),
        migrations.CreateModel(
            name='StageQuestion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.PositiveIntegerField(default=1)),
                ('marks', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('negative_marks', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('time_limit_seconds', models.PositiveIntegerField(blank=True, null=True)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='in_stages', to='exams.question')),
                ('stage', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stage_questions', to='exams.quizstage')),
            ],
            options={
                'ordering': ('stage', 'order', 'created_at'),
            },
        ),
        migrations.CreateModel(
            name='StageRandomRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('count', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('tags_any', models.JSONField(blank=True, default=list)),
                ('difficulties', models.JSONField(blank=True, default=list)),
                ('subspecialties', models.JSONField(blank=True, default=list)),
                ('region_hints', models.JSONField(blank=True, default=list)),
                ('stage', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='random_rule', to='exams.quizstage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddIndex(
            model_name='questionoption',
            index=models.Index(fields=['question', 'order'], name='exams_quest_questio_658f9b_idx'),
        ),
        migrations.AddIndex(
            model_name='quiz',
            index=models.Index(fields=['start_at'], name='exams_quiz_start_a_e3d4f6_idx'),
        ),
        migrations.AddIndex(
            model_name='quiz',
            index=models.Index(fields=['end_at'], name='exams_quiz_end_at_6c63b3_idx'),
        ),
        migrations.AddIndex(
            model_name='accesstoken',
            index=models.Index(fields=['quiz', 'user'], name='exams_acces_quiz_id_d826bd_idx'),
        ),
        migrations.AddIndex(
            model_name='accesstoken',
            index=models.Index(fields=['expires_at'], name='exams_acces_expires_df983f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='accesstoken',
            unique_together={('quiz', 'user')},
        ),
        migrations.AddIndex(
            model_name='quizattempt',
            index=models.Index(fields=['quiz', 'user', 'status'], name='exams_quiza_quiz_id_2d6ff8_idx'),
        ),
        migrations.AddIndex(
            model_name='quizattempt',
            index=models.Index(fields=['percent'], name='exams_quiza_percent_cf753e_idx'),
        ),
        migrations.AddIndex(
            model_name='quizattempt',
            index=models.Index(fields=['is_passed'], name='exams_quiza_is_pass_012a52_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='quizattempt',
            unique_together={('quiz', 'user')},
        ),
        migrations.AddIndex(
            model_name='anticheateventlog',
            index=models.Index(fields=['attempt', 'code', 'occurred_at'], name='exams_antic_attempt_d1b77b_idx'),
        ),
        migrations.AddIndex(
            model_name='quizstage',
            index=models.Index(fields=['quiz', 'order'], name='exams_quizs_quiz_id_442f74_idx'),
        ),
        migrations.AddConstraint(
            model_name='quizstage',
            constraint=models.UniqueConstraint(condition=models.Q(('is_current', True)), fields=('quiz',), name='uniq_current_stage_per_quiz'),
        ),
        migrations.AlterUniqueTogether(
            name='quizstage',
            unique_together={('quiz', 'order')},
        ),
        migrations.AddIndex(
            model_name='leaderboardentry',
            index=models.Index(fields=['quiz', 'quiz_stage', 'zone', 'percent', 'time_taken_seconds'], name='exams_leade_quiz_id_7b7ff1_idx'),
        ),
        migrations.AddIndex(
            model_name='leaderboardentry',
            index=models.Index(fields=['quiz', 'quiz_stage', 'rank'], name='exams_leade_quiz_id_09d543_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='leaderboardentry',
            unique_together={('quiz', 'quiz_stage', 'user')},
        ),
        migrations.AddIndex(
            model_name='quizstageattempt',
            index=models.Index(fields=['attempt', 'stage'], name='exams_quizs_attempt_85f0ec_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='quizstageattempt',
            unique_together={('attempt', 'stage')},
        ),
        migrations.AddIndex(
            model_name='questionexposurelog',
            index=models.Index(fields=['stage_attempt', 'question', 'occurred_at'], name='exams_quest_stage_a_a102cb_idx'),
        ),
        migrations.AddIndex(
            model_name='attemptanswer',
            index=models.Index(fields=['stage_attempt', 'question'], name='exams_attem_stage_a_fff4fd_idx'),
        ),
        migrations.AddConstraint(
            model_name='attemptanswer',
            constraint=models.UniqueConstraint(deferrable=django.db.models.constraints.Deferrable['DEFERRED'], fields=('stage_attempt', 'question', 'selected_option'), name='uq_stage_attempt_question_option'),
        ),
        migrations.AddIndex(
            model_name='stageadmission',
            index=models.Index(fields=['stage', 'user'], name='exams_stage_stage_i_e248cd_idx'),
        ),
        migrations.AddConstraint(
            model_name='stageadmission',
            constraint=models.UniqueConstraint(deferrable=django.db.models.constraints.Deferrable['IMMEDIATE'], fields=('stage', 'user'), name='uq_stage_admission_stage_user'),
        ),
        migrations.AddIndex(
            model_name='stageattemptitem',
            index=models.Index(fields=['stage_attempt', 'order'], name='exams_stage_stage_a_8c4e41_idx'),
        ),
        migrations.AddIndex(
            model_name='stageattemptitem',
            index=models.Index(fields=['stage_attempt', 'question'], name='exams_stage_stage_a_33b1df_idx'),
        ),
        migrations.AddConstraint(
            model_name='stageattemptitem',
            constraint=models.UniqueConstraint(deferrable=django.db.models.constraints.Deferrable['DEFERRED'], fields=('stage_attempt', 'question'), name='uq_stageattemptitem_attempt_question'),
        ),
        migrations.AddIndex(
            model_name='stagequestion',
            index=models.Index(fields=['stage', 'order'], name='exams_stage_stage_i_f1818a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='stagequestion',
            unique_together={('stage', 'question')},
        ),
    ]
